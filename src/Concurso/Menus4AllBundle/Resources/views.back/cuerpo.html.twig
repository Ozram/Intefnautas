{% extends 'ConcursoMenus4AllBundle::layout.html.twig' %}

{% block cuerpo %}
<div id="seccionMensajes">
</div>

<div id="seccionCentral">
    <div id="seccionOpciones" class="span2">

    </div>

    <div id="seccionPrincipal" class="span10">
        <div class="page-header">
            <h2>Para el jurado <small>pequeña reseña sobre la aplicación</small></h2>
        </div>
        <div class="span12">
            <div class="well">
                <h4 class="text-info">Librerias Javascript</h4>
                <hr>
                <p>Hemos usado las siguientes librerias de Javascript:.</p>
                <ul>
                    <li>JQuery 1.8.2</li>
                    <li>Underscore</li>
                    <li>Backbone</li>
                    <li>Bootstrap (js de bootstrap)</li>
                </ul>
                <hr>
                <h4 class="text-info">Bundles Usados</h4>
                <hr>
                <p>Hemos usado los siguientes bundles para facilitar y agilizar el desarollo de nuestra aplicación.</p>
                <ul>
                    <li>FOSUserBundle</li>
                    <li>DoctrineFixturesBundle</li>
                </ul>
                <p>El FOSUserBundle es el encargado de gestionar los usuarios incluyendo <i>login</i>,<i>registro</i>,<i>profile</i>,<i>confirmacion</i>...</p>
                <p>DoctrineFixturesBundle es un bundle que facilita la creación de datos de prueba en la base de datos, para al borrar esta
                    mediante la ejecucion de un simple comando se rellenen los datos.</p>
                <p>En un principio nos planteamos el uso de MopaBootstrapBundle y de KnpPaginatorBundle, pero como al final nos decidimos a realizar la app dividiendo cliente y servidor, dejaron de ser necesarios y los descartamos.</p>
                <hr>
                <h4 class="text-info">CSS</h4>
                <hr>
                <ul>
                    <li>Bootstrap</li>
                </ul>
                <p>Hemos usado Bootstrap para dar estilo a la página.</p>
            </div>
        </div>
        <div class="span12">
            <div class="well">
                <h4 class="muted">Funcionamiento de la Aplicación</h4>
                <hr>
                <p>Hemos realizado la aplicación bajo una arquitectura RESTful, en la que el cliente se comunica mediante peticiones
                    Ajax con el servidor y este devuelve datos estructurados en forma de JSON para que sean manipulados e interpretados en 
                    el cliente mediante el uso de librerias de Javascript.</p>
                <p>De recibir las peticiones Ajax del cliente se encargan los diferentes controladores situados en
                    <i>src/Concurso/Menus4AllBundle/Controller</i>, el routing de la aplicación es el encargado de que, segun la ruta y
                    el method de la petición, se ejecute una u otra acción del controlador.
                </p>
                <p>Los controladores hacen llamadas a los servicios de <i>src/Concurso/Menus4AllBundle/Services</i>, que son los que se encargan
                    de introducir los datos a la BD <i>SQLite</i> y poseen toda la lógica de negocio de la aplicación. Una vez estos servicios
                    procesan todos los datos, devuelven un array de información, con el StatusCode (dependiendo de que todo haya ido o bien o
                    de si ha habido algún problema) y un listado de los errores (en caso de haberlos) o en caso de éxito del listado de Objetos que han sido afectados
                    por la petición.
                </p>
                <h5 class="muted">Modelo Entidad Relación</h5>
                <img src="{{ asset('bundles/concursomenus4all/vendors/img/modeloEntidadRealcionMenus4All.svg') }}" alt="Modelo Entidad Realción"> </img>

            </div>
        </div>
        <div class="span12">
            <div class="well">
                <h4 class="text-warning">Funcionalidades de la aplicación</h4>
                <hr>
                <h4>Creación, listado y edición de recetas</h4>
                <p>Se ha implementado la posibilidad de listar, crear y editar las recetas. A cada receta se le puede añadir la lista de
                    ingredientes asociados con la cantidad correspondiente.</p>
                <h4>Creación, listado y edición de menús</h4>
                <p>Se ha implementado la posibilidad de listar, crear y editar las menús. A cada menú se le pueden asociar recetas que lo forman
                    un menu representa una de las comidas del día (desayuno, almuerzo, merienda, cena...), eso se marca mediante la propiedad 'tipo de menu'
                    que se puede elegir y modificar en el formulario de menús.</p>

                <h4 class="text-warning">Funcionalidades de la aplicación no finalizadas</h4>
                <h4>Compartir recetas y menús</h4>
                <p>Esta implementada del lado del servidor la posiblidadad de compartir recetas y menus con otros usuarios, pero debido al límite
                    de los 10 días no nos ha dado tiempo a implementar la interfaz de usuario y la lógica de cliente de esta sección</p>
                <h4>Valoraciones</h4>
                <p>Esta implementada del lado del servidor la posiblidadad de valorar las recetas y menús de los diferentes usuarios, 
                    una valoración consite en una <i>puntuación</i> y un <i>mensaje</i>, está relacionada con una receta o un menú y el usuario que la ha creado.</p>
                <h4>Notificaciones</h4>
                <p>Tambien hemos implementado en el servidor un sistema de notificaciones que devuelve los menús y recetas que han compartido contigo otros usuarios.</p>
                <h4>Lista de la Compra</h4>
                <p>Hay implementado un controlador y un servicio que permite la creación de listas de la compra a partir de Menús y Recetas, 
                    recorriendo los ingredientes y apuntandolos juntoa la cantidad necesaria de cada uno.</p>
                <hr>
            </div>
        </div>
        <div class="span12">
            <div class="well">
                <h4 class="text-warning">El porqué de la arquitectura RESTful</h4>
                <hr>
                <p>
                    La estructura RESTful consiste en usar un protocolo cliente/servidor sin estado. Mediante una misma dirección para acceder a los recursos usando distintas operaciones tenemos lo que se denomina una sintaxis universal.</p>
                <p>
                    Al separar la aplicación entre el cliente y el servidor, y limitar su comunicación a envio de datos planos mediante archivos JSON, reducimos mucho el trafico, además de separar conceptos, lo que nos permite centrarnos en la función de cada uno de ellos (el desarollo de cada una puede ser independiente). 
                </p>
                <p>
                    En el caso del cliente la aplicación estará implementada en .js y se encargará de procesar los datos que le envie el servidor, y de pintar los mismos mediante plantillas dinámicas. También será el encargado de pedir información al servidor según la requiera.
                </p>
                <p>
                    El servidor se encargará de procesar las peticiones a los recursos, según el recurso y operación que se le pida (POST, PUT, DELETE, GET). Una vez leida la petición, hara las operaciones necesarias contra la base de datos y devolverá la información que se le haya requrido, formateandola a JSON. 
                </p>
            </div>
        </div>
    </div>
</div>
{% endblock %}


